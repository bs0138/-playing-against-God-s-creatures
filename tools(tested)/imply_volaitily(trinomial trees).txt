


```R
S0 <- 100 
K <- 100 
r <- 0.05 
T <- 1 
N <- 100 
sigma <- 0.2 


dt <- T/N
u <- exp(sigma*sqrt(dt))
d <- 1/u
pu <- (exp(r*dt)-d)/(u-d)
pd <- 1-pu

S <- matrix(0, N+1, N+1)
for (i in 1:(N+1)) {
  for (j in 1:i) {
    S[i,j] <- S0 * u^(j-1) * d^(i-j)
  }
}


C <- matrix(0, N+1, N+1)
for (j in 1:(N+1)) {
  C[N+1,j] <- max(0, S[N+1,j]-K)
}
for (i in N:1) {
  for (j in 1:i) {
    C[i,j] <- max(S[i,j]-K, exp(-r*dt)*(pu*C[i+1,j+1]+pd*C[i+1,j]))
    if (S[i,j] > K) {
      C[i,j] <- max(C[i,j], S[i,j]-K)
    }
  }
}


bs_call <- function(S0, K, r, sigma, T) {
  d1 <- (log(S0/K)+(r+sigma^2/2)*T) / (sigma*sqrt(T))
  d2 <- d1 - sigma*sqrt(T)
  S0*pnorm(d1) - K*exp(-r*T)*pnorm(d2)
}

implied_volatility <- function(S0, K, r, T, C, tol=1e-6, maxiter=100) {

  f <- function(sigma) {
    bs_call(S0, K, r, sigma, T) - C
  }
  
  
  a <- 0.01
  b <- 1
  fa <- f(a)
  fb <- f(b)
  if (fa*fb > 0) {
    stop("Error: f(a) and f(b) must have opposite signs")
  }
  for (i in 1:maxiter) {
    c <- (a+b)/2
    fc <- f(c)
    if (fc == 0 || (b-a)/2 < tol) {
      return(c)
    }
    if (fa*fc < 0) {
      b <- c
      fb <- fc
    } else {
      a <- c
      fa <- fc
    }
  }
  stop("Error: maximum number of iterations exceeded")
}


C0 <- C[1,1]
iv <- implied_volatility(S0, K, r, T, C0)
print(iv)

```

